# Используем образ с Node.js и pnpm
image: node:20-alpine

# Определение стадий конвейера
stages:
  - prepare
  - quality
  - build

# Глобальные переменные
variables:
  PNPM_VERSION: '10.8.1'
  # Отключаем автоматическое клонирование для ускорения
  GIT_STRATEGY: clone

# Глобальный before_script для установки pnpm
before_script:
  - |
    if ! command -v pnpm &> /dev/null || [ "$(pnpm --version)" != "$PNPM_VERSION" ]; then
      echo "Installing pnpm $PNPM_VERSION..."
      npm install -g pnpm@$PNPM_VERSION
    fi
  - pnpm config set store-dir .pnpm-store

# Глобальный кэш
cache: &global_cache
  key:
    files:
      - pnpm-lock.yaml
  paths:
    - .pnpm-store
    - node_modules/
  policy: pull

# Установка зависимостей - выполняется только при изменении pnpm-lock.yaml
install:
  stage: prepare
  cache:
    <<: *global_cache
    policy: pull-push
  script:
    - pnpm install --frozen-lockfile
  artifacts:
    paths:
      - node_modules/
      - .pnpm-store
    expire_in: 2 hours
  # Выполняем install только если изменились зависимости
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - changes:
        - pnpm-lock.yaml
        - package.json

# Параллельные проверки качества кода
quality:
  stage: quality
  needs: ['install']
  parallel:
    matrix:
      - JOB_NAME: 'lint:ts'
        SCRIPT: 'pnpm lint:ts'
      - JOB_NAME: 'lint:scss'
        SCRIPT: 'pnpm lint:scss'
      - JOB_NAME: 'test'
        SCRIPT: 'pnpm test'
  script:
    - echo "Running $JOB_NAME"
    - $SCRIPT
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    when: always
    reports:
      junit:
        - junit.xml
    expire_in: 1 week

# Сборка проекта
build:
  stage: build
  needs: ['install']
  script:
    - pnpm build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  only:
    - main
    - develop

# Альтернативный вариант - создать образ с зависимостями
.build_docker_image:
  stage: prepare
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $CI_REGISTRY_IMAGE:deps-$CI_COMMIT_SHA -f Dockerfile.deps
      .
    - docker push $CI_REGISTRY_IMAGE:deps-$CI_COMMIT_SHA
  rules:
    - changes:
        - pnpm-lock.yaml
        - package.json
        - Dockerfile.deps
      when: manual
